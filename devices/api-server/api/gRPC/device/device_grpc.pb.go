// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package device

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeviceClient is the client API for Device service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceClient interface {
	GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	SetOnOff(ctx context.Context, in *OnOffValueRequest, opts ...grpc.CallOption) (*OnOffValueResponse, error)
	SetTemperature(ctx context.Context, in *TemperatureValueRequest, opts ...grpc.CallOption) (*TemperatureValueResponse, error)
	SetMode(ctx context.Context, in *ModeValueRequest, opts ...grpc.CallOption) (*ModeValueResponse, error)
	SetFanMode(ctx context.Context, in *FanModeValueRequest, opts ...grpc.CallOption) (*FanModeValueResponse, error)
	SetFanSpeed(ctx context.Context, in *FanSpeedValueRequest, opts ...grpc.CallOption) (*FanSpeedValueResponse, error)
}

type deviceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceClient(cc grpc.ClientConnInterface) DeviceClient {
	return &deviceClient{cc}
}

func (c *deviceClient) GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/device.Device/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) SetOnOff(ctx context.Context, in *OnOffValueRequest, opts ...grpc.CallOption) (*OnOffValueResponse, error) {
	out := new(OnOffValueResponse)
	err := c.cc.Invoke(ctx, "/device.Device/SetOnOff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) SetTemperature(ctx context.Context, in *TemperatureValueRequest, opts ...grpc.CallOption) (*TemperatureValueResponse, error) {
	out := new(TemperatureValueResponse)
	err := c.cc.Invoke(ctx, "/device.Device/SetTemperature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) SetMode(ctx context.Context, in *ModeValueRequest, opts ...grpc.CallOption) (*ModeValueResponse, error) {
	out := new(ModeValueResponse)
	err := c.cc.Invoke(ctx, "/device.Device/SetMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) SetFanMode(ctx context.Context, in *FanModeValueRequest, opts ...grpc.CallOption) (*FanModeValueResponse, error) {
	out := new(FanModeValueResponse)
	err := c.cc.Invoke(ctx, "/device.Device/SetFanMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) SetFanSpeed(ctx context.Context, in *FanSpeedValueRequest, opts ...grpc.CallOption) (*FanSpeedValueResponse, error) {
	out := new(FanSpeedValueResponse)
	err := c.cc.Invoke(ctx, "/device.Device/SetFanSpeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceServer is the server API for Device service.
// All implementations must embed UnimplementedDeviceServer
// for forward compatibility
type DeviceServer interface {
	GetStatus(context.Context, *StatusRequest) (*StatusResponse, error)
	SetOnOff(context.Context, *OnOffValueRequest) (*OnOffValueResponse, error)
	SetTemperature(context.Context, *TemperatureValueRequest) (*TemperatureValueResponse, error)
	SetMode(context.Context, *ModeValueRequest) (*ModeValueResponse, error)
	SetFanMode(context.Context, *FanModeValueRequest) (*FanModeValueResponse, error)
	SetFanSpeed(context.Context, *FanSpeedValueRequest) (*FanSpeedValueResponse, error)
	mustEmbedUnimplementedDeviceServer()
}

// UnimplementedDeviceServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceServer struct {
}

func (UnimplementedDeviceServer) GetStatus(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedDeviceServer) SetOnOff(context.Context, *OnOffValueRequest) (*OnOffValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOnOff not implemented")
}
func (UnimplementedDeviceServer) SetTemperature(context.Context, *TemperatureValueRequest) (*TemperatureValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTemperature not implemented")
}
func (UnimplementedDeviceServer) SetMode(context.Context, *ModeValueRequest) (*ModeValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMode not implemented")
}
func (UnimplementedDeviceServer) SetFanMode(context.Context, *FanModeValueRequest) (*FanModeValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFanMode not implemented")
}
func (UnimplementedDeviceServer) SetFanSpeed(context.Context, *FanSpeedValueRequest) (*FanSpeedValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFanSpeed not implemented")
}
func (UnimplementedDeviceServer) mustEmbedUnimplementedDeviceServer() {}

// UnsafeDeviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceServer will
// result in compilation errors.
type UnsafeDeviceServer interface {
	mustEmbedUnimplementedDeviceServer()
}

func RegisterDeviceServer(s grpc.ServiceRegistrar, srv DeviceServer) {
	s.RegisterService(&Device_ServiceDesc, srv)
}

func _Device_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.Device/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).GetStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_SetOnOff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnOffValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).SetOnOff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.Device/SetOnOff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).SetOnOff(ctx, req.(*OnOffValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_SetTemperature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemperatureValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).SetTemperature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.Device/SetTemperature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).SetTemperature(ctx, req.(*TemperatureValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_SetMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModeValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).SetMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.Device/SetMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).SetMode(ctx, req.(*ModeValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_SetFanMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FanModeValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).SetFanMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.Device/SetFanMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).SetFanMode(ctx, req.(*FanModeValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_SetFanSpeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FanSpeedValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).SetFanSpeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.Device/SetFanSpeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).SetFanSpeed(ctx, req.(*FanSpeedValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Device_ServiceDesc is the grpc.ServiceDesc for Device service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Device_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "device.Device",
	HandlerType: (*DeviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _Device_GetStatus_Handler,
		},
		{
			MethodName: "SetOnOff",
			Handler:    _Device_SetOnOff_Handler,
		},
		{
			MethodName: "SetTemperature",
			Handler:    _Device_SetTemperature_Handler,
		},
		{
			MethodName: "SetMode",
			Handler:    _Device_SetMode_Handler,
		},
		{
			MethodName: "SetFanMode",
			Handler:    _Device_SetFanMode_Handler,
		},
		{
			MethodName: "SetFanSpeed",
			Handler:    _Device_SetFanSpeed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/gRPC/device/device.proto",
}
